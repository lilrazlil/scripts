# Source: firestate/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: firestate-config
  namespace:
data:
  config.json: ""

---
# Source: firestate/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: firestate0
  namespace:
spec:
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: firestate0
  type: "NodePort"
  externalTrafficPolicy: Local
  sessionAffinity: ClientIP
---
# Source: firestate/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: firestate1
  namespace:
spec:
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: firestate1
  type: "NodePort"
  externalTrafficPolicy: Local
  sessionAffinity: ClientIP
---
# Source: firestate/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: firestatex
  namespace:
spec:
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: firestatex
  type: "NodePort"
  externalTrafficPolicy: Local
  sessionAffinity: ClientIP
---
# Source: firestate/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: firestate0
  namespace:
  labels:
    app: firestate0
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: firestate0
  template:
    metadata:
      name: firestate0
      labels:
        app: firestate0
      annotations:

    spec:
      containers:
      - name: firestate
        image: image:1
        imagePullPolicy: Always
        command: ["/opt/test"]
        args: ["test"]
        ports:
        - containerPort: 80
          protocol: TCP
        resources:
          limits:
            cpu: "0.5"
            memory: 800Mi
          requests:
            cpu: "0.1"
            memory: 500Mi
        volumeMounts:
        - mountPath: /config
          name: config
        - mountPath: /secrets
          name: secrets-vol
        env:
        - name: TEST
          valueFrom:
            secretKeyRef:
              key: test
              name: test-secrets
        livenessProbe:
          httpGet:
            path: /state
            port: 80
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /state
            port: 80
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 30
      terminationGracePeriodSeconds: 10
      volumes:
      - name: secrets-vol
        secret:
          secretName: access-secrets
      - configMap:
          name: config
        name: config
---
# Source: firestate/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: firestate1
  namespace:
  labels:
    app: firestate1
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: firestate1
  template:
    metadata:
      name: firestate1
      labels:
        app: firestate1
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "80"
        prometheus.io/scrape: "true"
    spec:
      containers:
      - name: firestate
        image: image:1
        imagePullPolicy: Always
        command: ["/opt/test"]
        args: ["test"]
        ports:
        - containerPort: 80
          protocol: TCP
        resources:
          limits:
            cpu: "0.5"
            memory: 800Mi
          requests:
            cpu: "0.1"
            memory: 500Mi
        volumeMounts:
        - mountPath: /config
          name: config
        - mountPath: /secrets
          name: -vol
        env:
        - name: test
          valueFrom:
            secretKeyRef:
              key: test
              name: test-secrets
        livenessProbe:
          httpGet:
            path: /state
            port: 80
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /state
            port: 80
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 30
      terminationGracePeriodSeconds: 10
      volumes:
      - name: -vol
        secret:
          secretName: access-secrets
      - configMap:
          name: firestate-config
        name: config
---
# Source: firestate/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: firestatex
  namespace:
  labels:
    app: firestatex
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: firestatex
  template:
    metadata:
      name: firestatex
      labels:
        app: firestatex
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "80"
        prometheus.io/scrape: "true"
    spec:
      containers:
      - name: firestate
        image: image:1
        imagePullPolicy: Always
        command: ["/opt/test"]
        args: ["test"]
        ports:
        - containerPort: 80
          protocol: TCP
        resources:
          limits:
            cpu: "0.5"
            memory: 800Mi
          requests:
            cpu: "0.1"
            memory: 500Mi
        volumeMounts:
        - mountPath: /config
          name: config
        - mountPath: /secrets
          name: -vol
        env:
        - name: test
          valueFrom:
            secretKeyRef:
              key: test
              name: test-secrets
        livenessProbe:
          httpGet:
            path: /state
            port: 80
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /state
            port: 80
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 30
      terminationGracePeriodSeconds: 10
      volumes:
      - name: -vol
        secret:
          secretName: -secrets
      - configMap:
          name: -config
        name: config
